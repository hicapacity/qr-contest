(function() {
  var sortFunc = function(a, b) {
    var ret = b.codes - a.codes;
    if (ret == 0) {
      if (a.stamp < b.stamp)
        return -1;
      else if (a.stamp > b.stamp)
        return 1;
    }
    return ret;
  };
  
  var lastupdate = null;
  var users = null;
  var leaderboard = null;
  
  /*
   * Moves "elem" so that it is before "after" and then calls "callback" when
   * done. Unable to move a player to the end, but that should never be needed.
   */
  var movePlayer = function(elem, after, callback) {
    var currentPos = elem.position();
    var finalPos = after.position();
    var finalHeight = elem.outerHeight() - 6;
    var finalPlaceholder = $('<div class="placeholder"/>').css('height', '1px').insertBefore(after);
    var currentPlaceholder = $('<div class="placeholder"/>').css('height', finalHeight + 'px').insertBefore(elem);
    elem.css({
      position: 'absolute',
      width: elem.outerWidth() + 'px',
      top: currentPos.top + 'px',
      left: currentPos.left + 'px'
    });
    finalPlaceholder.animate({height: finalHeight + 'px'}, 750);
    currentPlaceholder.animate({height: '1px'}, 750);
    elem.animate({top: finalPos.top + 'px'}, 750, function() {
      finalPlaceholder.finish().remove();
      currentPlaceholder.finish().remove();
      elem.css({
        position: 'relative',
        width: 'auto',
        top: 0,
        left: 0
      });
      after.before(elem);
      if (callback) callback();
    });
  };
  
  var createPlayers = function(users) {
    $.each(users, function() {
      $('<div class="player"/>')
        .text(this.name)
        .prepend('<img src="' + this.pic + '" />')
        .append('<span class="qrtotal">' + this.codes + '</span>')
        .attr('id', 'player_' + this.id)
        .data('id', this.id)
        .appendTo(leaderboard)
        .fadeIn(250);
    });
  };
  
  var getUpdates = function() {
    $.get(<%= HicapQrContest::Application.routes.url_helpers.api_leaderboard_updates_since_path(:version => 1, :stamp => '').to_json %> + lastupdate, function(data) {
      lastupdate = data.timestamp;
      users = users.concat(data.new_users);
      createPlayers(data.new_users);
      $.each(data.updates, function() {
        var idx = 0;
        for (; idx < users.length; idx++) {
          if (users[idx].id == this.id)
            break;
        }
        if (idx < users.length) {
          users[idx].codes = this.codes;
          users[idx].stamp = this.stamp;
          $('#player_' + this.id + ' span.qrtotal').text(this.codes);
        }
      });
      users.sort(sortFunc);
      
      var currentElem = leaderboard.children('.player:first');
      var num = 0;
      var callback = function() {
        if (currentElem.data('id') != users[num].id) {
          console.log('Num ' + num + ': ' + currentElem.data('id') + ' does not match ' + users[num].id);
          for (var swap = currentElem.next('.player'); swap.length > 1; swap = swap.next('.player')) {
            if (swap.data('id') == users[num].id) {
              console.log('found swap');
              num++;
              movePlayer(swap, currentElem, callback);
              return;
            }
          }
          // how did we get here?
          //window.location.reload();
          console.log('Broken 1');
        } else {
          currentElem = currentElem.next('.player');
          num++;
          if ((currentElem.length == 0 && num < users.length) || (currentElem.length > 0 && num >= users.length)) {
            // how did we get here?
            //window.location.reload();
            console.log('Broken 2');
          } else if (num < users.length) {
            callback();
          }
        }
      };
      callback();
    });
  };
  
  var loadInitialTable = function() {
    leaderboard = $('#leaderboard');
    $.get(<%= HicapQrContest::Application.routes.url_helpers.api_leaderboard_path(:version => 1).to_json %>, function(data) {
      // TODO: remove next line - added for testing
      data = {"timestamp":"2013-02-21T20:00:10-10:00","users":[{"id":9324158,"name":"Bob","pic":"//graph.facebook.com/9324158/picture","codes":6,"stamp":"2013-02-26T06:56:46Z"}]};
      lastupdate = data.timestamp;
      users = data.users;
      users.sort(sortFunc);
      createPlayers(users);
      setInterval(getUpdates, <%= Settings.leaderboard_update_ms.to_json %>);
    });
  };
  
  var fbAuthorized = window.fbAuthorized;
  window.fbAuthorized = function() {
    loadInitialTable();
    fbAuthorized();
  };
  
  var fbNotAuthorized = window.fbNotAuthorized;
  window.fbNotAuthorized = function() {
    loadInitialTable();
    fbNotAuthorized();
  };
})();